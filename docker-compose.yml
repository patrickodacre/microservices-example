version: "3.8"

services:
  # control:
    # container_name: "control_panel"
    # depends_on:
      # - accounts
      # - locations
      # - readings
  # Accounts Service
  accounts_db:
    image: postgres:15.3-alpine3.18
    container_name: "accounts_db"
    ports:
      - 5432:5432
    restart: always
    secrets:
      - db-password
    environment:
      POSTGRES_DB: accounts_example_db
      POSTGRES_USER: postgres
      PGUSER: postgres
      POSTGRES_PASSWORD_FILE: /run/secrets/db-password
    volumes:
      - accounts_pg:/var/lib/postgresql/data
      - accounts_db:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  accounts:
    container_name: "accounts_service"
    depends_on: ["accounts_db", "adminer"]
    build:
      context: ./services/accounts/.
      dockerfile: Dockerfile
    ports:
      - 3000:3000
    networks:
      - backend

  # Locations Service
  locations_db:
    image: postgres:15.3-alpine3.18
    container_name: "locations_db"
    ports:
      - 5433:5432
    restart: always
    secrets:
      - db-password
    environment:
      POSTGRES_DB: locations_example_db
      POSTGRES_USER: postgres
      PGUSER: postgres
      POSTGRES_PASSWORD_FILE: /run/secrets/db-password
    volumes:
      - locations_pg:/var/lib/postgresql/data
      - locations_db:/docker-entrypoint-initdb.d

    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  locations:
    container_name: "locations_service"
    depends_on: ["locations_db"]
    build:
      context: ./services/locations/.
      dockerfile: Dockerfile
    ports:
      - 3001:3000
    networks:
      - backend


  # Readings Service
  readings_db:
    image: postgres:15.3-alpine3.18
    container_name: "readings_db"
    ports:
      - 5434:5432
    restart: always
    secrets:
      - db-password
    environment:
      POSTGRES_DB: readings_example_db
      POSTGRES_USER: postgres
      PGUSER: postgres
      POSTGRES_PASSWORD_FILE: /run/secrets/db-password
    volumes:
      - readings_pg:/var/lib/postgresql/data
      - readings_db:/docker-entrypoint-initdb.d

    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  readings:
    container_name: "readings_service"
    depends_on: ["readings_db"]
    build:
      context: ./services/readings/.
      dockerfile: Dockerfile
    ports:
      - 3002:3000
    networks:
      - backend

  adminer:
    image: adminer
    container_name: "postgres_adminer"
    depends_on: ["accounts_db", "locations_db", "readings_db"]
    restart: always
    ports:
      - 8080:8080
    networks:
      - backend

  zookeeper:
    image: "confluentinc/cp-zookeeper:latest"
    container_name: zookeeper
    hostname: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

      # requires SSL setup
      # ZOOKEEPER_SECURE_CLIENT_PORT: 2182
    networks:
      - backend
    volumes:
      - ./scripts/security:/etc/kafka/s
  broker:
    image: 'confluentinc/cp-kafka:latest'
    hostname: broker
    container_name: broker
    ports:
      - 9092:9092
    depends_on: ["zookeeper"]
    networks:
      - backend
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      # 1st must be localhost, but the 2nd may be localhost or 'broker' -> container_name
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      # KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR default is 3
      # if replication factor is > # of brokers, then we get an error when consume attempts to grab messages from the queue
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      # Start Docker Compose and view logs for other env variables to set
      KAFKA_NUM_PARTITIONS: 1

      # OPTIONAL?
      # KAFKA_BROKER_ID: 1
      # KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      # KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      # KAFKA_DELETE_TOPIC_ENABLE: "true"
      # KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      # TOPIC_AUTO_CREATE: true
      # KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: "false"

networks:
  default:
  backend:
volumes:
  zookeeper:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "./services/zookeeper/data"
  accounts_pg:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "./services/accounts/pg_data"
  accounts_db:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "./services/accounts/database"

  locations_pg:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "./services/locations/pg_data"
  locations_db:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "./services/locations/database"

  readings_pg:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "./services/readings/pg_data"
  readings_db:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "./services/readings/database"

secrets:
  db-password:
    file: secrets/db-password.txt

    # command: tail -f /dev/null
    # working_dir: /usr/src/app
    # command: ["go build -o main ./cmd/accounts/.", "main"]
    # volumes:
      # - .:/usr/src/app
